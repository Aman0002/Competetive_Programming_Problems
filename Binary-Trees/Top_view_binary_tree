/*
*****************GEEKS FOR GEEKS********
https://practice.geeksforgeeks.org/problems/top-view-of-binary-tree/1#
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Print from leftmost node to rightmost node.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100
Your Task:
Since this is a function problem. You don't have to take input. Just complete the function printTopView() that takes root node as parameter and prints the top view. Print endline after end of printing the top view.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 105
1 <= Node Data <= 105
 

Note:The Input/Ouput format and Example given are used for system's internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.

*/

vector<int> topView(struct Node *root)
{
    //Your code here
    vector<int> ans;
    
    if (root==NULL)
    return ans;
    
    queue< pair<struct Node *,int >> q;
    q.push(make_pair(root,0));
    map<int,int> m;
    while (q.size()!=0)
    {
        struct Node * temp = q.front().first;
        int h = q.front().second;
        q.pop();
        if (!m[h])
        {
            m[h] = temp->data;
        }
        if (temp->left)
        {
            q.push(make_pair(temp->left,h-1));
        }
        if (temp->right)
        {
            q.push(make_pair(temp->right,h+1));
        }
    }
    for (auto x :m)
    {
        ans.push_back(x.second);
    }
    
    return ans;
}
